{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"\ud83d\udca1 Welcome to my website! <p>Your one-stop destination for tutorials, blogs, and resources.</p> <p> It's all about learning not competition </p> Explore Posts <ul> <li> <p> MIT License</p> <p>Turbo is open-source built with material mkdocs and hosted on GitHub pages licensed under the MIT License, feel free to use it exclusively for your personal projects.</p> </li> </ul>"},{"location":"about/","title":"About","text":""},{"location":"about/#hello-i-am-mohamed-gamal","title":"\ud83c\udf1f Hello, I am Mohamed Gamal","text":""},{"location":"about/#title","title":"\ud83e\uddd1\u200d\ud83d\udcbb Title","text":""},{"location":"about/#ai-researcher-and-software-engineer","title":"AI Researcher and Software Engineer","text":""},{"location":"about/#motivation-objective","title":"\ud83c\udf31 Motivation &amp; Objective","text":"<p>Hello, I\u2019m Mohamed Gamal and I am deeply passionate about leveraging technology to enhance productivity and simplify life. I completely believe that collaboration and continuous learning are essential to success. Moreover, teamwork and knowledge-sharing empower collective achievements.</p>"},{"location":"about/#personal-information","title":"\ud83d\udcc7 Personal Information","text":"<p>Full Name: Mohamed Gamal Country: \ud83c\uddea\ud83c\uddec Egypt Phone: (+20) 011 5113 2047 Email: 1Mohamed.Gamal54@gmail.com Official Email: Mohamed_Gamal@ci.suez.edu.eg </p>"},{"location":"about/#social-profiles","title":"\ud83c\udf10 Social Profiles","text":"<ul> <li> <p> GitHub: Mohammed-Gamal </p> </li> <li> <p> LinkedIn: mohamed-gamal-74192b1a7 </p> </li> <li> <p> SlideShare: Mohamed-Gamal</p> </li> <li> <p> Discord: <code>#grand02</code> </p> </li> </ul> <p>Feel free to reach out via any of the channels above! Let's create something amazing together. \ud83c\udf1f</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2022/11/23/an-introduction-to-mkdocs/","title":"An Introduction to MKDocs","text":"","tags":["introduction","mkdocs"]},{"location":"blog/2022/11/23/an-introduction-to-mkdocs/#what-is-mkdocs","title":"What is MKDocs?","text":"<p>MKDocs is a fast, simple, and flexible static site generator that's geared towards building project documentation. It is written in Python and uses the Markdown language to create beautiful and responsive websites. MKDocs is highly customizable and allows you to create professional-looking documentation with ease.</p>","tags":["introduction","mkdocs"]},{"location":"blog/2022/11/23/an-introduction-to-mkdocs/#why-use-mkdocs","title":"Why Use MKDocs?","text":"<p>MKDocs is a popular choice for creating documentation websites for a variety of reasons:</p> <ul> <li>Ease of Use: MKDocs is simple to set up and use, making it an excellent choice for developers and technical writers.</li> <li>Markdown Support: MKDocs uses Markdown, a lightweight markup language with plain text formatting syntax, making it easy to write and format content.</li> <li>Customization: MKDocs offers a range of themes and plugins to customize the look and feel of your documentation site.</li> <li>Version Control Integration: MKDocs integrates well with version control systems like Git, allowing you to manage your documentation alongside your codebase.</li> <li>Responsive Design: MKDocs generates websites with responsive design, ensuring that your documentation looks great on all devices.</li> </ul>","tags":["introduction","mkdocs"]},{"location":"blog/2022/11/23/an-introduction-to-mkdocs/#getting-started-with-mkdocs","title":"Getting Started with MKDocs","text":"<p>To get started with MKDocs, you need to have Python installed on your system. You can install MKDocs using <code>pip</code>, the Python package manager. Here's how you can install MKDocs:</p> <pre><code>pip install mkdocs\n</code></pre> <p>Once you have MKDocs installed, you can create a new project using the following command:</p> <pre><code>mkdocs new my-project\n</code></pre> <p>This command will create a new directory called <code>my-project</code> with the necessary files and folders to get started with MKDocs. You can then navigate to the project directory and start the development server using the following command:</p> <pre><code>cd my-project\nmkdocs serve\n</code></pre> <p>This will start a local development server that you can access in your web browser at <code>http://localhost:8000</code>. You can now start writing your documentation in Markdown and see the changes reflected in real-time in your browser.</p>","tags":["introduction","mkdocs"]},{"location":"blog/2022/11/23/an-introduction-to-mkdocs/#conclusion","title":"Conclusion","text":"<p>MKDocs is a powerful and user-friendly tool for creating documentation websites. Whether you're documenting a software project, writing a technical guide, or creating a personal blog, MKDocs provides an easy and efficient way to build professional-looking websites. With its simplicity, flexibility, and customization options, MKDocs is an excellent choice for anyone looking to create beautiful and responsive documentation sites.</p> <p>If you're new to MKDocs, I encourage you to explore its features and experiment with different themes and plugins to create a site that meets your needs. Happy documenting! </p> <p>The official MKDocs documentation is available at mkdocs.org, where you can find detailed guides, tutorials, and examples to help you get started with MKDocs.</p> <p>Happy documenting! \ud83d\udcdd\ud83d\ude80</p> <p>  Share on Twitter   Share on Facebook   Share on LinkedIn </p>","tags":["introduction","mkdocs"]},{"location":"coding/image-processing/","title":"Digital Image Processing","text":"","tags":["image-processing","beginners","tutorial"]},{"location":"coding/image-processing/#introduction","title":"Introduction","text":"<p>In signals and systems, digital signal processing (DSP), we learned about the Fourier Transform:</p> Fourier Transform (FT) \\[ X(\\omega) \\underset{\\omega \\ \\in \\ (-\\infty, \\ \\infty)}{} = \\int_{-\\infty}^{\\infty} x(t)\\ e^{-jwt} \\, dt \\quad \\quad \\text{(Continuous Time FT)} \\] \\[ X(\\omega) \\underset{\\omega \\ \\in \\ [0, \\ 2\\pi)}{} = \\sum_{n=-\\infty}^{\\infty} x(n)\\ e^{-jwn} \\quad \\quad \\text{(Discrete Time FT)} \\] \\[ X(k) \\underset{k \\ = \\ 0, \\ 1, \\ \\ldots, \\ mkdN-1}{} = \\sum_{n=0}^{N-1} x(n)\\ e^{-j \\frac{2 \\pi k n}{N}} \\quad \\quad \\text{(Discrete FT)} \\]","tags":["image-processing","beginners","tutorial"]},{"location":"coding/image-processing/#getting-started","title":"Getting Started","text":"<p>To get started with Python, you need to have Python installed on your system. You can download the latest version of Python from the official website and follow the installation instructions for your operating system. Once you have Python installed, you can start writing and running Python code using an interactive interpreter or a code editor.</p>","tags":["image-processing","beginners","tutorial"]},{"location":"coding/image-processing/#writing-your-first-python-program","title":"Writing Your First Python Program","text":"<p>Let's write a simple Python program that prints \"Hello, World!\" to the console. Open a text editor and create a new file called <code>hello.py</code>. Add the following code to the file:</p> PythonC++ main.py<pre><code>  # Print \"Hello, World!\" to the console\n  print(\"Hello, World!\") \n</code></pre> main.cpp<pre><code>  #include &lt;iostream&gt;\n\n  int main(void) {\n    std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n    return 0;\n  }\n</code></pre> <p>Save the file and run it using the Python interpreter. You should see the output \"Hello, World!\" printed to the console.</p> Trick in Python <p>main.py<pre><code>  # Print \"Hello, World!\" to the console\n  text = \"Hello, World!\"\n  print(text) \n</code></pre> For more information you can check the official Mkdocs documentation at Mkdocs Docs.</p>","tags":["image-processing","beginners","tutorial"]},{"location":"coding/image-processing/#variables-and-data-types","title":"Variables and Data Types","text":"<p>Python supports various data types, including integers, floats, strings, lists, tuples, dictionaries, and more. You can create variables to store data of different types and perform operations on them. Here's an example of creating variables and working with different data types:</p> main.py<pre><code># Create variables of different data types\nnum1 = 10\nnum2 = 3.14\nname = \"Alice\"\nis_student = True\n</code></pre> Data Type Description Example int Integer <code>10</code> float Floating-point number <code>3.14</code> str String <code>\"Alice\"</code> bool Boolean <code>True</code> <p>You can use variables<sup>1</sup> to store data, perform calculations<sup>2</sup>, and manipulate strings in Python.</p>","tags":["image-processing","beginners","tutorial"]},{"location":"coding/image-processing/#control-structures","title":"Control Structures","text":"<p>Python supports various control structures, including if-else statements, loops, and functions. You can use these control structures to control the flow of your program and perform different actions based on conditions. Here's an example of using if-else statements and loops in Python:</p> main.py<pre><code># Example of if-else statement\nnum = 10\nif num &gt; 0:\n    print(\"Positive number\")\nelse:\n    print(\"Negative number\")\n\n# Example of a for loop\nfor i in range(5):\n    print(i)\n</code></pre> <p>You can use control structures to make your Python programs more dynamic and interactive.</p> Tasks to Try <ul> <li> Task 1: Create a Python program that checks if a number is even or odd.</li> <li> Task 2: Implement a Python function that calculates the factorial of a number.</li> <li> Task 3: Write a Python program that generates a Fibonacci sequence.</li> <li> Task 4: Create a Python program that sorts a list of numbers in ascending order.</li> </ul>","tags":["image-processing","beginners","tutorial"]},{"location":"coding/image-processing/#conclusion","title":"Conclusion","text":"<p>Python is a powerful and versatile programming language that is easy to learn and use. Whether you're a beginner or an experienced programmer, Python offers a wide range of features and libraries to help you build applications, analyze data, and solve complex problems. By learning Python, you can unlock a world of possibilities and take your programming skills to the next level.</p> <p>If you're new to Python, I encourage you to explore the language further and experiment with different features and libraries. Python has a vibrant community and extensive documentation that can help you learn and grow as a programmer. Happy coding! \ud83d\udc0d\ud83d\ude80</p> <p>You can check the official Python documentation at python.org for more information and resources to help you get started with Python.</p> <p>Happy coding! \ud83d\udc0d\ud83d\ude80</p> <ol> <li> <p>Variables are used to store data in memory and can be assigned different values during the execution of a program.\u00a0\u21a9</p> </li> <li> <p>Calculations are performed via the CPU, specifically the ALU (Arithmetic Logic Unit), which is responsible for performing arithmetic and logical operations.\u00a0\u21a9</p> </li> </ol>","tags":["image-processing","beginners","tutorial"]},{"location":"coding/python/","title":"Using Python for beginners","text":"","tags":["python","beginners","tutorial"]},{"location":"coding/python/#introduction","title":"Introduction","text":"<p>This notebook is an example of how to use Python for beginners. Python is a high-level, interpreted programming language that is widely used for various applications, including web development, data analysis, machine learning, and more. Python is known for its simplicity, readability, and versatility, making it an excellent choice for beginners and experienced programmers alike.</p>","tags":["python","beginners","tutorial"]},{"location":"coding/python/#getting-started","title":"Getting Started","text":"<p>To get started with Python, you need to have Python installed on your system. You can download the latest version of Python from the official website and follow the installation instructions for your operating system. Once you have Python installed, you can start writing and running Python code using an interactive interpreter or a code editor.</p>","tags":["python","beginners","tutorial"]},{"location":"coding/python/#writing-your-first-python-program","title":"Writing Your First Python Program","text":"<p>Let's write a simple Python program that prints \"Hello, World!\" to the console. Open a text editor and create a new file called <code>hello.py</code>. Add the following code to the file:</p> PythonC++ main.py<pre><code>  # Print \"Hello, World!\" to the console\n  print(\"Hello, World!\") \n</code></pre> main.cpp<pre><code>  #include &lt;iostream&gt;\n\n  int main(void) {\n    std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n    return 0;\n  }\n</code></pre> <p>Save the file and run it using the Python interpreter. You should see the output \"Hello, World!\" printed to the console.</p> Trick in Python <p>main.py<pre><code>  # Print \"Hello, World!\" to the console\n  text = \"Hello, World!\"\n  print(text) \n</code></pre> For more information you can check the official Mkdocs documentation at Mkdocs Docs.</p>","tags":["python","beginners","tutorial"]},{"location":"coding/python/#variables-and-data-types","title":"Variables and Data Types","text":"<p>Python supports various data types, including integers, floats, strings, lists, tuples, dictionaries, and more. You can create variables to store data of different types and perform operations on them. Here's an example of creating variables and working with different data types:</p> main.py<pre><code># Create variables of different data types\nnum1 = 10\nnum2 = 3.14\nname = \"Alice\"\nis_student = True\n</code></pre> Data Type Description Example int Integer <code>10</code> float Floating-point number <code>3.14</code> str String <code>\"Alice\"</code> bool Boolean <code>True</code> <p>You can use variables<sup>1</sup> to store data, perform calculations<sup>2</sup>, and manipulate strings in Python.</p>","tags":["python","beginners","tutorial"]},{"location":"coding/python/#control-structures","title":"Control Structures","text":"<p>Python supports various control structures, including if-else statements, loops, and functions. You can use these control structures to control the flow of your program and perform different actions based on conditions. Here's an example of using if-else statements and loops in Python:</p> main.py<pre><code># Example of if-else statement\nnum = 10\nif num &gt; 0:\n    print(\"Positive number\")\nelse:\n    print(\"Negative number\")\n\n# Example of a for loop\nfor i in range(5):\n    print(i)\n</code></pre> <p>You can use control structures to make your Python programs more dynamic and interactive.</p> Tasks to Try <ul> <li> Task 1: Create a Python program that checks if a number is even or odd.</li> <li> Task 2: Implement a Python function that calculates the factorial of a number.</li> <li> Task 3: Write a Python program that generates a Fibonacci sequence.</li> <li> Task 4: Create a Python program that sorts a list of numbers in ascending order.</li> </ul>","tags":["python","beginners","tutorial"]},{"location":"coding/python/#conclusion","title":"Conclusion","text":"<p>Python is a powerful and versatile programming language that is easy to learn and use. Whether you're a beginner or an experienced programmer, Python offers a wide range of features and libraries to help you build applications, analyze data, and solve complex problems. By learning Python, you can unlock a world of possibilities and take your programming skills to the next level.</p> <p>If you're new to Python, I encourage you to explore the language further and experiment with different features and libraries. Python has a vibrant community and extensive documentation that can help you learn and grow as a programmer. Happy coding! \ud83d\udc0d\ud83d\ude80</p> <p>You can check the official Python documentation at python.org for more information and resources to help you get started with Python.</p> <p>Happy coding! \ud83d\udc0d\ud83d\ude80</p> <ol> <li> <p>Variables are used to store data in memory and can be assigned different values during the execution of a program.\u00a0\u21a9</p> </li> <li> <p>Calculations are performed via the CPU, specifically the ALU (Arithmetic Logic Unit), which is responsible for performing arithmetic and logical operations.\u00a0\u21a9</p> </li> </ol>","tags":["python","beginners","tutorial"]},{"location":"coding/random-forest/","title":"Random Forest Classifier","text":"","tags":["machine-learning","random-forest","python"]},{"location":"coding/random-forest/#introduction","title":"Introduction","text":"<p>This notebook is an example of how to use the Random Forest Classifier to predict the survival of passengers on the Titanic. The Random Forest Classifier is an ensemble learning method that fits a number of decision tree classifiers on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting.</p>","tags":["machine-learning","random-forest","python"]},{"location":"coding/random-forest/#data-preparation","title":"Data Preparation","text":"<p>First, we need to load the data and prepare it for training the model. We will perform the following steps:</p> <ol> <li>Load the data</li> <li>Handle missing values</li> <li>Encode categorical features</li> <li>Split the data into training and validation sets</li> <li>Scale the features</li> <li>Train the Random Forest Classifier</li> <li>Evaluate the model</li> <li>Make predictions on the test set</li> <li>Submit the predictions</li> <li>Conclusion</li> <li>Next Steps</li> <li>References</li> <li>Appendix</li> <li>Feedback</li> </ol> <p>Let's get started!</p>","tags":["machine-learning","random-forest","python"]},{"location":"coding/random-forest/#load-the-data","title":"Load the data","text":"<p>First, we need to load the data from the CSV files using the Pandas library. We will load the training and test datasets and display the first few rows to understand the data.</p> <pre><code># Load the data\ntrain_data = pd.read_csv('../input/titanic/train.csv')\ntest_data = pd.read_csv('../input/titanic/test.csv')\n\n# Display the first few rows of the training data\ntrain_data.head()\n</code></pre>","tags":["machine-learning","random-forest","python"]},{"location":"coding/random-forest/#handle-missing-values","title":"Handle missing values","text":"<p>Next, we need to handle missing values in the dataset. We will fill missing values in the 'Age' and 'Fare' columns with the median value, and in the 'Embarked' column with the mode value.</p> <pre><code># Fill missing values in the 'Age' column with the median value\ntrain_data['Age'].fillna(train_data['Age'].median(), inplace=True)\ntest_data['Age'].fillna(test_data['Age'].median(), inplace=True)\n\n# Fill missing values in the 'Fare' column with the median value\ntrain_data['Fare'].fillna(train_data['Fare'].median(), inplace=True)\ntest_data['Fare'].fillna(test_data['Fare'].median(), inplace=True)\n\n# Fill missing values in the 'Embarked' column with the mode value\ntrain_data['Embarked'].fillna(train_data['Embarked'].mode()[0], inplace=True)\ntest_data['Embarked'].fillna(test_data['Embarked'].mode()[0], inplace=True)\n</code></pre>","tags":["machine-learning","random-forest","python"]},{"location":"coding/random-forest/#encode-categorical-features","title":"Encode categorical features","text":"<p>Next, we need to encode categorical features in the dataset. We will use one-hot encoding to convert categorical features into numerical features.</p> <pre><code># Encode categorical features\ntrain_data = pd.get_dummies(train_data, columns)\ntest_data = pd.get_dummies(test_data, columns)\n</code></pre>","tags":["machine-learning","random-forest","python"]},{"location":"coding/random-forest/#split-the-data-into-training-and-validation-sets","title":"Split the data into training and validation sets","text":"<p>Next, we need to split the data into training and validation sets. We will use the 'train_test_split' function from the 'sklearn.model_selection' module to split the data.</p> <pre><code># Split the data into features and target\nX = train_data.drop('Survived', axis=1)\ny = train_data['Survived']\n\n# Split the data into training and validation sets\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n</code></pre>","tags":["machine-learning","random-forest","python"]},{"location":"coding/random-forest/#scale-the-features","title":"Scale the features","text":"<p>Next, we need to scale the features in the dataset. We will use the 'StandardScaler' class from the 'sklearn.preprocessing' module to scale the features.</p> <pre><code># Scale the features\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_val = scaler.transform(X_val)\ntest_data = scaler.transform(test_data)\n</code></pre>","tags":["machine-learning","random-forest","python"]},{"location":"coding/random-forest/#train-the-random-forest-classifier","title":"Train the Random Forest Classifier","text":"<p>Next, we need to train the Random Forest Classifier on the training data. We will use the 'RandomForestClassifier' class from the 'sklearn.ensemble' module to train the model.</p> <pre><code># Train the Random Forest Classifier\nrf = RandomForestClassifier(random_state=42)\nrf.fit(X_train, y_train)\n</code></pre>","tags":["machine-learning","random-forest","python"]},{"location":"coding/random-forest/#math-behind-the-random-forest-classifier","title":"Math behind the Random Forest Classifier","text":"\\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\] <p>The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\), because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\).</p>","tags":["machine-learning","random-forest","python"]},{"location":"coding/random-forest/#evaluate-the-model","title":"Evaluate the model","text":"<p>Next, we need to evaluate the model on the validation set. We will use the 'accuracy_score' function from the 'sklearn.metrics' module to calculate the accuracy of the model.</p> <pre><code># Evaluate the model\ny_pred = rf.predict(X_val)\naccuracy = accuracy_score(y_val, y_pred)\nprint('Accuracy:', accuracy)\n</code></pre>","tags":["machine-learning","random-forest","python"]},{"location":"coding/random-forest/#make-predictions-on-the-test-set","title":"Make predictions on the test set","text":"<p>Next, we need to make predictions on the test set using the trained model. We will use the 'predict' method of the Random Forest Classifier to make predictions.</p> <pre><code># Make predictions on the test set\npredictions = rf.predict(test_data)\n</code></pre>","tags":["machine-learning","random-forest","python"]},{"location":"coding/random-forest/#submit-the-predictions","title":"Submit the predictions","text":"<p>Finally, we need to submit the predictions to the competition. We will create a submission file in CSV format with the 'PassengerId' and 'Survived' columns and submit it to the competition.</p> <pre><code># Create a submission file\nsubmission = pd.DataFrame({'PassengerId': test_data['PassengerId'], 'Survived': predictions})\nsubmission.to_csv('submission.csv', index=False)\n</code></pre>","tags":["machine-learning","random-forest","python"]},{"location":"coding/random-forest/#conclusion","title":"Conclusion","text":"<p>In this notebook, we used the Random Forest Classifier to predict the survival of passengers on the Titanic. We loaded the data, handled missing values, encoded categorical features, split the data into training and validation sets, scaled the features, trained the model, evaluated the model, made predictions on the test set, and submitted the predictions to the competition.</p>","tags":["machine-learning","random-forest","python"]},{"location":"coding/random-forest/#next-steps","title":"Next Steps","text":"<ul> <li>Experiment with different hyperparameters of the Random Forest Classifier to improve the model performance.</li> <li>Try other ensemble learning methods such as Gradient Boosting and AdaBoost to see if they perform better than the Random Forest Classifier.</li> <li>Explore other feature engineering techniques to improve the model performance.</li> <li>Try other machine learning algorithms such as Logistic Regression, Support Vector Machine, and Neural Network to see if they perform better than the Random Forest Classifier.</li> <li>Learn more about machine learning and data science by taking online courses, reading books, and working on projects.</li> <li>Share your work with the community and get feedback to improve your skills.</li> <li>Stay curious, keep learning, and have fun with data!</li> </ul>","tags":["machine-learning","random-forest","python"]},{"location":"coding/random-forest/#references","title":"References","text":"<ul> <li>Random Forest Classifier</li> </ul>","tags":["machine-learning","random-forest","python"]},{"location":"coding/random-forest/#appendix","title":"Appendix","text":"<p>The code snippets in this notebook are written in Python. You can run the code in a Jupyter notebook, Google Colab, or any other Python environment. You can also modify the code to experiment with different features, algorithms, and hyperparameters.</p>","tags":["machine-learning","random-forest","python"]},{"location":"coding/random-forest/#feedback","title":"Feedback","text":"<p>If you have any feedback or suggestions, please feel free to leave a comment. I appreciate your feedback and will do my best to improve the notebook based on your suggestions.</p>","tags":["machine-learning","random-forest","python"]},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/category/blog/","title":"Blog","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#beginners","title":"beginners","text":"<ul> <li>Digital Image Processing</li> <li>Using Python for Beginners</li> </ul>"},{"location":"tags/#image-processing","title":"image-processing","text":"<ul> <li>Digital Image Processing</li> </ul>"},{"location":"tags/#introduction","title":"introduction","text":"<ul> <li>An Introduction to MKDocs</li> </ul>"},{"location":"tags/#machine-learning","title":"machine-learning","text":"<ul> <li>Random Forest Classifier</li> </ul>"},{"location":"tags/#mkdocs","title":"mkdocs","text":"<ul> <li>An Introduction to MKDocs</li> </ul>"},{"location":"tags/#python","title":"python","text":"<ul> <li>Using Python for Beginners</li> <li>Random Forest Classifier</li> </ul>"},{"location":"tags/#random-forest","title":"random-forest","text":"<ul> <li>Random Forest Classifier</li> </ul>"},{"location":"tags/#tutorial","title":"tutorial","text":"<ul> <li>Digital Image Processing</li> <li>Using Python for Beginners</li> </ul>"}]}